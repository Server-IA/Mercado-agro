datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id               Int               @id @default(autoincrement())
  nationalId       String            @unique
  phoneNumber      String?           @unique
  pinHash          String?
  userTypeId       Int?
  userType         UserType?         @relation(fields: [userTypeId], references: [id])
  accountStatus    AccountStatus     @default(PENDING_ACTIVATION)
  failedAttempts   Int               @default(0)
  lastFailedAt     DateTime?
  lockUntil        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  smsVerifications SmsVerification[]
  accountLocks     AccountLock[]
  loginAttempts    LoginAttempt[]
  notifications    Notification[]
  farms            Farm[]
  products         Product[]         @relation("UserProducts")

  @@index([nationalId], name: "idx_national_id")
  @@index([phoneNumber], name: "idx_phone_number")
}

enum AccountStatus {
  PENDING_ACTIVATION
  ACTIVE
  TEMPORARILY_LOCKED
  PERMANENTLY_LOCKED
}

model SmsVerification {
  id        Int                 @id @default(autoincrement())
  userId    Int
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeHash  String
  expiresAt DateTime
  purpose   VerificationPurpose
  createdAt DateTime            @default(now())
}

enum VerificationPurpose {
  REGISTRATION
  PIN_RECOVERY
}

model AccountLock {
  id       Int       @id @default(autoincrement())
  userId   Int
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lockType LockType
  lockedAt DateTime  @default(now())
  unlockAt DateTime?
}

enum LockType {
  TEMPORARY
  PERMANENT
}

model LoginAttempt {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  attemptAt DateTime @default(now())
  success   Boolean
}

model Notification {
  id               Int              @id @default(autoincrement())
  userId           Int
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationType NotificationType
  sentAt           DateTime         @default(now())
}

enum NotificationType {
  ACCOUNT_TEMPORARILY_LOCKED
  ACCOUNT_PERMANENTLY_LOCKED
  PIN_CHANGED
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int?
  parent        Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategories")
  products      Product[]
}

model CultivationType {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model UnitOfMeasure {
  id           Int       @id @default(autoincrement())
  name         String
  abbreviation String?
  products     Product[]
}

model Department {
  id             Int            @id @default(autoincrement())
  name           String
  code           String         @db.Char(10)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  municipalities Municipality[]
}

model Municipality {
  id           Int        @id @default(autoincrement())
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  name         String
  code         String     @db.Char(10)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  farms        Farm[]
}

model Farm {
  id             Int          @id @default(autoincrement())
  ownerId        Int
  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name           String
  municipalityId Int
  municipality   Municipality @relation(fields: [municipalityId], references: [id])
  address        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  products       Product[]
}

model Product {
  id                Int             @id @default(autoincrement())
  sellerId          Int
  seller            User            @relation("UserProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  farmId            Int
  farm              Farm            @relation(fields: [farmId], references: [id], onDelete: Cascade)
  name              String
  categoryId        Int
  category          Category        @relation(fields: [categoryId], references: [id])
  cultivationTypeId Int
  cultivationType   CultivationType @relation(fields: [cultivationTypeId], references: [id])
  description       String?
  unitOfMeasureId   Int
  unitOfMeasure     UnitOfMeasure   @relation(fields: [unitOfMeasureId], references: [id])
  stockAvailable    Int             @default(0)
  availableDate     DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  priceRanges       PriceRange[]
  productPhotos     ProductPhoto[]
}

model PriceRange {
  id          Int     @id @default(autoincrement())
  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  minQuantity Int
  unitPrice   Decimal
  totalPrice  Decimal
}

model ProductPhoto {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String
  photoOrder Int
  createdAt  DateTime @default(now())
}
